#!/usr/bin/env bash
# A Shell Script to switch Vulkan ICD profile based on OpenGL active GPU
# Copyright (c) 2022, Artur 'h0m3' Paiva <dr.hoome@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of [project] nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


PROGNAME="${0}"
PROGNAME="$(basename "${PROGNAME}")"


# Show information
function info() {
    echo "${PROGNAME}: $1" >&1
}


# Show an error
function error() {
    echo "${PROGNAME}: $1" >&2
    exit 1
}


# Get the GPU vendor
function gpu_vendor() {
    vendor="$(glxinfo -B | grep "OpenGL vendor string" | cut -d ":" -f 2 | sed 's/ //g')"
    echo "${vendor}"
}


# Check if user has glxinfo
if ! command -v glxinfo &> /dev/null; then
    error "Unable to find glxinfo, please install it"
fi

if gpu_vendor | grep "AMD" 2>&1 > /dev/null; then

    info "AMD card detected"

    if [ ! -z "${AMD_VK_ICD_FILENAMES}" ]; then
        export DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1=1 VK_ICD_FILENAMES="${AMD_VK_ICD_FILENAMES}"
    elif [ -f "/usr/share/vulkan/icd.d/radeon_icd.i686.json" ] && [ -f "/usr/share/vulkan/icd.d/radeon_icd.x86_64.json" ]; then
        info "Using amdvlk"
        export DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1=1 VK_ICD_FILENAMES="/usr/share/vulkan/icd.d/radeon_icd.i686.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json"
    elif [ -f "/usr/share/vulkan/icd.d/amd_icd32.json" ] && [ -f "/usr/share/vulkan/icd.d/amd_icd64.json" ]; then
        info "Using RADV / Mesa Vulkan"
        export DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1=1 VK_ICD_FILENAMES="/usr/share/vulkan/icd.d/amd_icd32.json:/usr/share/vulkan/icd.d/amd_icd64.json"
    else
        error "Unable to find amd ICD files. Please set \$AMD_VK_ICD_FILENAMES"
    fi

elif gpu_vendor | grep "NVIDIA" 2>&1 > /dev/null; then

    info "NVIDIA card detected"

    if [ ! -z "${NV_VK_ICD_FILENAMES}" ]; then
        export DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1=1 VK_ICD_FILENAMES="${NV_VK_ICD_FILENAMES}"
    elif [ -f "/usr/share/vulkan/icd.d/nvidia_icd.json" ]; then
        info "Using nvidia proprietary vulkan"
        export DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1=1 VK_ICD_FILENAMES="/usr/share/vulkan/icd.d/nvidia_icd.json"
    else
        error "Unable to find nvidia ICD file. Please set \$NV_VK_ICD_FILENAMES"
    fi

else
    error "No GPU detected"
fi

${@}
