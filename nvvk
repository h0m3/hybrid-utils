#!/usr/bin/env bash
# A Shell Script to switch Vulkan ICD profile based on OpenGL active GPU
# Copyright (c) 2022, Artur 'h0m3' Paiva <dr.hoome@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of [project] nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Set NVVK version
VERSION="0.3"

# Get program name
PROGRAM_NAME="${0}"
PROGRAM_NAME="$(basename "$(echo "${PROGRAM_NAME}")")"

# List of ICD paths
_VK_ICD_PATH="/usr/local/etc/vulkan/icd.d
/usr/local/share/vulkan/icd.d
/etc/vulkan/icd.d
/usr/share/vulkan/icd.d
$HOME/.local/share/vulkan/icd.d"


# Show information messages
function info() {
    echo "${PROGRAM_NAME}: $1" >&1
}


# Return a text error
function error() {
    echo "${PROGRAM_NAME}: ${1}"
    exit 1
}


# Show a usage message
function usage() {
    echo "Usage: ${0} [option] program [arguments...]"
    echo
    echo "Options:"
    echo -e "\t--nvidia\tIgnore card detection and force a NVIDIA card"
    echo -e "\t--amd\t\tIgnore card detection and force AMD card"
    echo -e "\t--radv\t\tForce radv over amdvlk"
    echo -e "\t-h, --help\tDisplay this message and exit"
    echo -e "\t-v, --version\tDisplay version and exit"
    echo
    echo "Environment Variables:"
    echo -e "\tVK_ICD_FILENAMES"
    echo -e "\t\tPath for additional Vulkan ICD files, priority is \$VK_ICD_FILENAMES over standard paths"
    echo
}


# Show a version message
function version() {
    bash_version="$(bash --version | head -n 1)"
    glx_version="$(glxinfo -B | grep "OpenGL version string" | cut -d ":" -f 2 | sed 's/ //')"

    echo "nvvk ${VERSION}"
    echo "Copyright (c) 2022, Artur 'h0m3' Paiva <dr.hoome@gmail.com>"
    echo "Licensed under BSD Three Clause License <https://opensource.org/licenses/BSD-3-Clause>"
    echo
    echo "${bash_version}"
    echo "glxinfo, OpenGL ${glx_version}"
    echo
    echo "This is free software; you are free to change and redistribute it."
    echo "There is NO WARRANTY, to the extent permitted by law."
}


# Get the GPU vendor
function gpu_vendor() {
    vendor="$(glxinfo -B | grep "OpenGL vendor string" | cut -d ":" -f 2 | sed 's/ //g')"
    echo "${vendor}"
}


# Get all ICD files
function icd_files() {
    IFS=":"
    for file in ${VK_ICD_FILENAMES}; do
        [ -f "${file}" ] && echo "${file}"
    done
    unset IFS

    for dir in ${_VK_ICD_PATH}; do
        if [ -d "${dir}" ]; then
            for file in "${dir}"/*.json; do
                [ -f "${file}" ] && echo "${file}"
            done
        fi
    done
}


# Get AMD ICD paths
function amd_icd() {
    icd_files="$(icd_files)"
    icd_paths=""

    for file in ${icd_files}; do
        if [ -z "${force_radv}" ] && [ "$(basename "${file}")" == "amd_icd32.json" ] || [ "$(basename "${file}")" == "radeon_icd.i686.json" ]; then
            icd_paths="${file}"
            break
        fi
    done

    for file in ${icd_files}; do
        if [ -z "${force_radv}" ] && [ "$(basename "${file}")" == "amd_icd64.json" ] || [ "$(basename "${file}")" == "radeon_icd.x86_64.json" ]; then
            icd_paths="${icd_paths}:${file}"
            break
        fi
    done

    echo "${icd_paths}"
}


# Get NVIDIA ICD paths
function nvidia_icd() {
    for file in $(icd_files); do
        if [ "$(basename "${file}")" == "nvidia_icd.json" ]; then
            echo "${file}"
            break
        fi
    done
}


# Check if GPU running is AMD
function is_amd() {
    gpu_vendor | grep "AMD" 2>&1 > /dev/null
    return $?
}


# Check if GPU running is NVIDI
function is_nvidia() {
    gpu_vendor | grep "NVIDIA" 2>&1 > /dev/null
    return $?
}


# Check if user has glxinfo
if ! command -v glxinfo &> /dev/null; then
    error "Unable to find glxinfo, please install it"
fi

# Parse user arguments
if [ -z "${1}" ]; then
    error "Expecting a program name or aregument, try --help"
fi

if [ "${1}" == "--nvidia" ]; then
    info "Forcing NVIDIA graphics cards"
    force_nvidia="1"
    shift
elif [ "${1}" == "--amd" ]; then
    info "Forcing AMD graphics card"
    force_amd="1"
    shift
fi

if [ "${1}" == "--radv" ]; then
    info "Forcing radv over amdvlk"
    force_radv="1"
    shift
fi

if [ "${1}" == "--version" ] || [ "${1}" == "-v" ]; then
    version
    exit 0
fi

if [ "${1}" == "--help" ] || [ "${1}" == "-h" ]; then
    usage
    exit 0
fi

# Get GPU and ICD
if is_amd && [ -z "${force_nvidia}" ] || [ ! -z "${force_amd}" ]; then
    info "AMD card"
    icd="$(amd_icd)"
    if [ -z "${icd}" ]; then
        error "Unable to find AMD ICD files. Make sure amdvlk or vulkan-radeon is installed"
    fi

elif is_nvidia || [ ! -z "${force_nvidia}" ]; then

    info "NVIDIA card"
    icd="$(nvidia_icd)"
    if [ -z "${icd}" ]; then
        error "Unable to find NVIDIA ICD files. Make sure nvidia proprietary drivers are installed"
    fi

else
    error "Unable to detect GPU"
fi

# Run command with correct ICD
info "Using '${icd}'"
export DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1=1 VK_ICD_FILENAMES="${icd}"
${@}
